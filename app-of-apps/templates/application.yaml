{{- range .Values.applications }}

  {{- $destination := .destination }}
  {{- if not $destination }}
    {{- $destination = $.Values.spec.destination }}
  {{- end }}
  {{- range $key, $value := $.Values.spec.destination }}
    {{- if not (hasKey $destination $key) }}
      {{- $destination = merge $destination (dict $key $value) }}
    {{- end }}
  {{- end }}

  {{- if .namespace }}
  {{- if not $destination.namespace }}
    {{- $destination = merge $destination (dict "namespace" .namespace) }}
  {{- end }}
  {{- end }}

  {{- $project := .project }}
  {{- if not $project }}
    {{- $project = $.Values.spec.project }}
  {{- end }}
  {{- if not $project }}
    {{- $project = "default" }}
  {{- end }}

  {{- $appSource := .source }}
  {{- if not $appSource }}
    {{if not .sources}}
    {{- $appSource = $.Values.spec.source }}
    {{ if $appSource.path }}
    {{- $path := printf "%s/%s" $appSource.path .name }}
    {{- $appSource = merge $appSource (dict "path" $path) }}
    {{- end }}
    {{- end }}
  {{- else }}
    {{- range $key, $value := $.Values.spec.source }}
      {{- if not (hasKey $appSource $key) }}
        {{- $appSource = merge $appSource (dict $key $value) }}
      {{- end }}
    {{- end }}
  {{- end }}

  {{- $sources := .sources }}
    {{- if not $sources }}
    {{- $sources = $.Values.spec.sources }}
  {{- else}}
    {{- range $source := $.Values.spec.sources }}
      {{- if not (contains $sources $source) }}
        {{- $sources = append $sources $source }}
      {{- end }}
    {{- end }}
  {{- end }}

  {{- if not $sources }}
    {{- if not $appSource.targetRevision }}
    {{ $appSource = merge $appSource (dict "targetRevision" "main") }}
    {{- end }}
    {{- if not $appSource.path }}
    {{- $path1 := printf "apps/%s" .name }}
    {{- $appSource = merge $appSource (dict "path" $path1) }}
    {{- end }}
  {{- end }}

  {{- $appSyncPolicy := .syncPolicy }}
  {{- if not $appSyncPolicy }}
    {{- $appSyncPolicy = $.Values.spec.syncPolicy }}
  {{- end }}

  {{- if $.Values.spec.syncPolicy }}
    {{- range $key, $value := $.Values.spec.syncPolicy }}
      {{- if not (hasKey $appSyncPolicy $key) }}
        {{- $appSyncPolicy = merge $appSyncPolicy (dict $key $value) }}
      {{- end }}
    {{- end }}
  {{- end }}

  {{- $metadata := .metadata }}
  {{- if not $metadata }}
    {{- $metadata = $.Values.spec.metadata }}
  {{- end }}

  {{- range $key, $value := $.Values.spec.metadata }}
    {{- if not (hasKey $metadata $key) }}
      {{- $metadata = merge $metadata (dict $key $value) }}
    {{- end }}
  {{- end }}

  {{- if not $metadata.namespace }}
    {{- $metadata = merge $metadata (dict "namespace" "argocd") }}
  {{- end }}
  {{- if not $metadata.name }}
    {{- $metadata = merge $metadata (dict "name" .name) }}
  {{- end }}

  {{- $ignoreDifferences := .ignoreDifferences}}
  {{- if not $ignoreDifferences }}
  {{- $ignoreDifferences = $.Values.spec.ignoreDifferences }}
  {{- end }}

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  {{- $metadata | toYaml | nindent 2 }}
spec:
  project: {{ $project }}
  destination:
    {{ $destination | toYaml | nindent 4 }}
  {{- if $appSource }}
  source:
    {{ $appSource | toYaml | nindent 4 }}
  {{- end }}
  {{- if $appSyncPolicy }}
  syncPolicy:
    {{ $appSyncPolicy | toYaml | nindent 4 }}
  {{- end }}

  {{- if $sources }}
  sources:
    {{ $sources | toYaml | nindent 4 }} 
  {{- end }}
  {{- if $ignoreDifferences }}
  ignoreDifferences:
    {{ $ignoreDifferences | toYaml | nindent 4 }}
  {{- end }}
{{- end }}